
AA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001bc  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000364  0800036c  0001036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000364  08000364  0001036c  2**0
                  CONTENTS
  4 .ARM          00000000  08000364  08000364  0001036c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000364  0800036c  0001036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000364  08000364  00010364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000368  08000368  00010368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001036c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0001036c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000000c2  00000000  00000000  00010396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000009e  00000000  00000000  00010458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000050  00000000  00000000  000104f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000038  00000000  00000000  00010548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000abf  00000000  00000000  00010580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000167  00000000  00000000  0001103f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00002e16  00000000  00000000  000111a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00013fbc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000088  00000000  00000000  0001400c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800034c 	.word	0x0800034c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	0800034c 	.word	0x0800034c

080001e8 <delay_turnoff>:
#define gpiodP12onmask 1<<12
#define gpiodP12ofmask 0<<12
#define gpiodP13onmask 1<<13
#define gpiodP13ofmask ~(1<<13)

void delay_turnoff(){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
     int delayed= 0x0FFFFFFF;
 80001ee:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80001f2:	607b      	str	r3, [r7, #4]
     while(delayed--){
 80001f4:	bf00      	nop
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	1e5a      	subs	r2, r3, #1
 80001fa:	607a      	str	r2, [r7, #4]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d1fa      	bne.n	80001f6 <delay_turnoff+0xe>
    	 }
     }
 8000200:	bf00      	nop
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr

0800020c <main>:

int main () {
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
      rccahb1enR =gpiodmask;
 8000212:	4b24      	ldr	r3, [pc, #144]	; (80002a4 <main+0x98>)
 8000214:	2208      	movs	r2, #8
 8000216:	601a      	str	r2, [r3, #0]
      gpiodModr=gpiodP12mask;
 8000218:	4b23      	ldr	r3, [pc, #140]	; (80002a8 <main+0x9c>)
 800021a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800021e:	601a      	str	r2, [r3, #0]
      gpiodModr |=gpiodP13mask;
 8000220:	4b21      	ldr	r3, [pc, #132]	; (80002a8 <main+0x9c>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a20      	ldr	r2, [pc, #128]	; (80002a8 <main+0x9c>)
 8000226:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800022a:	6013      	str	r3, [r2, #0]

      //Name:mustafafirat
      for(int i=1;i<=12;i++){
 800022c:	2301      	movs	r3, #1
 800022e:	607b      	str	r3, [r7, #4]
 8000230:	e013      	b.n	800025a <main+0x4e>
		  gpiodOdr=gpiodP12onmask;
 8000232:	4b1e      	ldr	r3, [pc, #120]	; (80002ac <main+0xa0>)
 8000234:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000238:	601a      	str	r2, [r3, #0]
		  delay_turnoff(1000);
 800023a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800023e:	f7ff ffd3 	bl	80001e8 <delay_turnoff>
		  gpiodOdr&=gpiodP12ofmask;
 8000242:	4b1a      	ldr	r3, [pc, #104]	; (80002ac <main+0xa0>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4b19      	ldr	r3, [pc, #100]	; (80002ac <main+0xa0>)
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
		  delay_turnoff(1000);
 800024c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000250:	f7ff ffca 	bl	80001e8 <delay_turnoff>
      for(int i=1;i<=12;i++){
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	3301      	adds	r3, #1
 8000258:	607b      	str	r3, [r7, #4]
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	2b0c      	cmp	r3, #12
 800025e:	dde8      	ble.n	8000232 <main+0x26>
	}

      //Surname:polat
      for(int i=1;i<=5;i++){
 8000260:	2301      	movs	r3, #1
 8000262:	603b      	str	r3, [r7, #0]
 8000264:	e016      	b.n	8000294 <main+0x88>
    	  gpiodOdr |=gpiodP13onmask;
 8000266:	4b11      	ldr	r3, [pc, #68]	; (80002ac <main+0xa0>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	4a10      	ldr	r2, [pc, #64]	; (80002ac <main+0xa0>)
 800026c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000270:	6013      	str	r3, [r2, #0]
      delay_turnoff(1000);
 8000272:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000276:	f7ff ffb7 	bl	80001e8 <delay_turnoff>
          gpiodOdr&=gpiodP13ofmask;
 800027a:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <main+0xa0>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a0b      	ldr	r2, [pc, #44]	; (80002ac <main+0xa0>)
 8000280:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000284:	6013      	str	r3, [r2, #0]
          delay_turnoff(1000);
 8000286:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800028a:	f7ff ffad 	bl	80001e8 <delay_turnoff>
      for(int i=1;i<=5;i++){
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	3301      	adds	r3, #1
 8000292:	603b      	str	r3, [r7, #0]
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	2b05      	cmp	r3, #5
 8000298:	dde5      	ble.n	8000266 <main+0x5a>
        }

 return 0;
 800029a:	2300      	movs	r3, #0
}
 800029c:	4618      	mov	r0, r3
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	40023830 	.word	0x40023830
 80002a8:	40020c00 	.word	0x40020c00
 80002ac:	40020c14 	.word	0x40020c14

080002b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b0:	480d      	ldr	r0, [pc, #52]	; (80002e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b8:	480c      	ldr	r0, [pc, #48]	; (80002ec <LoopForever+0x6>)
  ldr r1, =_edata
 80002ba:	490d      	ldr	r1, [pc, #52]	; (80002f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002bc:	4a0d      	ldr	r2, [pc, #52]	; (80002f4 <LoopForever+0xe>)
  movs r3, #0
 80002be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c0:	e002      	b.n	80002c8 <LoopCopyDataInit>

080002c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002c6:	3304      	adds	r3, #4

080002c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002cc:	d3f9      	bcc.n	80002c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ce:	4a0a      	ldr	r2, [pc, #40]	; (80002f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d0:	4c0a      	ldr	r4, [pc, #40]	; (80002fc <LoopForever+0x16>)
  movs r3, #0
 80002d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d4:	e001      	b.n	80002da <LoopFillZerobss>

080002d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d8:	3204      	adds	r2, #4

080002da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002dc:	d3fb      	bcc.n	80002d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002de:	f000 f811 	bl	8000304 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002e2:	f7ff ff93 	bl	800020c <main>

080002e6 <LoopForever>:

LoopForever:
    b LoopForever
 80002e6:	e7fe      	b.n	80002e6 <LoopForever>
  ldr   r0, =_estack
 80002e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002f4:	0800036c 	.word	0x0800036c
  ldr r2, =_sbss
 80002f8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002fc:	2000001c 	.word	0x2000001c

08000300 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000300:	e7fe      	b.n	8000300 <ADC_IRQHandler>
	...

08000304 <__libc_init_array>:
 8000304:	b570      	push	{r4, r5, r6, lr}
 8000306:	4d0d      	ldr	r5, [pc, #52]	; (800033c <__libc_init_array+0x38>)
 8000308:	4c0d      	ldr	r4, [pc, #52]	; (8000340 <__libc_init_array+0x3c>)
 800030a:	1b64      	subs	r4, r4, r5
 800030c:	10a4      	asrs	r4, r4, #2
 800030e:	2600      	movs	r6, #0
 8000310:	42a6      	cmp	r6, r4
 8000312:	d109      	bne.n	8000328 <__libc_init_array+0x24>
 8000314:	4d0b      	ldr	r5, [pc, #44]	; (8000344 <__libc_init_array+0x40>)
 8000316:	4c0c      	ldr	r4, [pc, #48]	; (8000348 <__libc_init_array+0x44>)
 8000318:	f000 f818 	bl	800034c <_init>
 800031c:	1b64      	subs	r4, r4, r5
 800031e:	10a4      	asrs	r4, r4, #2
 8000320:	2600      	movs	r6, #0
 8000322:	42a6      	cmp	r6, r4
 8000324:	d105      	bne.n	8000332 <__libc_init_array+0x2e>
 8000326:	bd70      	pop	{r4, r5, r6, pc}
 8000328:	f855 3b04 	ldr.w	r3, [r5], #4
 800032c:	4798      	blx	r3
 800032e:	3601      	adds	r6, #1
 8000330:	e7ee      	b.n	8000310 <__libc_init_array+0xc>
 8000332:	f855 3b04 	ldr.w	r3, [r5], #4
 8000336:	4798      	blx	r3
 8000338:	3601      	adds	r6, #1
 800033a:	e7f2      	b.n	8000322 <__libc_init_array+0x1e>
 800033c:	08000364 	.word	0x08000364
 8000340:	08000364 	.word	0x08000364
 8000344:	08000364 	.word	0x08000364
 8000348:	08000368 	.word	0x08000368

0800034c <_init>:
 800034c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034e:	bf00      	nop
 8000350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000352:	bc08      	pop	{r3}
 8000354:	469e      	mov	lr, r3
 8000356:	4770      	bx	lr

08000358 <_fini>:
 8000358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800035a:	bf00      	nop
 800035c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800035e:	bc08      	pop	{r3}
 8000360:	469e      	mov	lr, r3
 8000362:	4770      	bx	lr
